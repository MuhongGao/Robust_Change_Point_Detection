library(KernSmooth)
library(MASS)
library(Matrix)
library(DNAcopy)
library(tilingArray)
library(cumSeg)

##############################Real Data
CGHdata <- read.csv("C:/Users/Acer/Desktop/My Document/Documents/Research/Projects/change points(bootstrap)/CGHdataset.csv", header=TRUE)
set.seed(12)

###########################define some functions 
#Estimate the standard deviation of the intensities
estimateSigma<-function (Y, h = 10) {  
    n = length(Y)
    YBar = rep(0, n)
    for (i in 1:n) {
        a = min(n, i + h)
        b = max(1, i - h)
        YBar[i] = mean(Y[b:a])
    }
    return(sqrt(var(Y - YBar) * (2 * h + 1)/(2 * h)))
}

#Calculate the value for local diagnostic function
localDiagnostic<-function (y, h) { 
    yy = c(rep(0, h - 1), y, rep(0, h))
    n = length(y)
    z = rep(0, n)
    for(i in 1:n){
    z[i]=sum(yy[i:(h+i-1)])/h-sum(yy[(h+i):(2*h-1+i)])/h
}
    return(z)
}

#Get the local maximizers of local diagnostic function
localMax<-function (y, span = 5) {  
    if (length(y) < span * 2 + 1) 
        return(NULL)
    n = length(y)
    index = NULL
    for (i in (span + 1):(n - span)) {
        if (y[i] == max(y[(i - span):(i + span)])) 
            index = c(index, i)
    }
    return(index)
}

clean<-function (LocalM, h) 
{
    len <- length(LocalM)
    rm.list <- NULL
    for (i in 1:(len - 1)) {
        if (LocalM[i] >= LocalM[i + 1] - h) {
            rm.list <- c(rm.list, i)
        }
    }
    if (length(rm.list) > 0) {
        LocalM <- LocalM[-as.vector(rm.list)]
    }
    return(LocalM = LocalM)
}

SARAp<-function (Y, h, hh = 2 * h, sigma = NULL) { 
    n = length(Y)
    LDF = localDiagnostic(Y, h)
    LDF.pos = LDF
    LDF.neg = -LDF
    if (is.null(sigma)) 
        sigma = estimateSigma(Y, h = max(3, 2 * floor(log(n))))
    pV.pos = 1 - 2 * pnorm(LDF.pos/(sqrt(2/h) * sigma))
    LocalMax = localMax(LDF.pos, span = hh)
    LocalMax = clean(LocalMax, h)
    LocalMaxValue = pV.pos[LocalMax]
    pV.neg = 1 - 2 * pnorm(LDF.neg/(sqrt(2/h) * sigma))
    LocalMin = localMax(LDF.neg, span = hh)
    LocalMin = clean(LocalMin, h)
    LocalMinValue = pV.neg[LocalMin]
    LocalExt <- c(LocalMax, LocalMin)
    LocalExtValue <- c(LocalMaxValue, LocalMinValue)
    LocalExtValue <- LocalExtValue[order(LocalExt)]
    LocalExt <- sort(LocalExt)
    return(list(index = LocalExt, pV = LocalExtValue))
}

#Get the inverse cumulative distribution function of local min p-values
fInverse<-function (n = 10000, h = 10, hh = 2 * h, precise = 10000, simT = 100) { 
    empirical = NULL
    for (i in 1:simT) {
        Y = rnorm(n)
        LDF = localDiagnostic(Y, h)
        LDF.pos = LDF
        LDF.neg = -LDF
        sigma = 1
        index.pos = localMax(y = LDF.pos, span = hh)
        pV.pos = 1 - 2 * pnorm(LDF.pos[index.pos]/(sqrt(2/h) * 
            sigma))
        index.neg = localMax(y = LDF.neg, span = hh)
        pV.neg = 1 - 2 * pnorm(LDF.neg[index.neg]/(sqrt(2/h) * 
            sigma))
        index <- c(index.pos, index.neg)
        pv <- c(pV.pos, pV.neg)
        pv <- pv[order(index)]
        index <- sort(index)
        len <- length(index)
        rm.list <- NULL
        for (j in 1:(len - 1)) {
            if (index[j] >= index[j + 1] - h) {
                rm.list <- c(rm.list, j)
            }
        }
        if (length(rm.list) > 0) {
            pv <- pv[-rm.list]
        }
        empirical <- c(empirical, pv)
        if (length(empirical) > 10 * precise) 
            break
    }
    return(quantile(empirical, probs = c(0:precise)/precise))
}

SARA<-function (Y, h = 10, hh = 2 * h, FINV = NULL, sigma = NULL, precise = 10000) {
    object = SARAp(Y = Y, h = h, hh = hh, sigma = sigma)
    index = object$index
    pV = object$pV
    if (is.null(FINV)) 
        FINV = fInverse(n = length(Y), h = h, hh = hh, precise = precise, 
            simT = 100)
    pVcorr = pV
    for (i in 1:length(pV)) {
        pVcorr[i] = (length(which(FINV < pV[i])))/(precise + 
            1)
    }
    return(list(index = index, pV = pVcorr))
}

screening<-function(x, y, h){       #local linear smoothing (rightlimit-leftlimit)
n=length(x)
xx=1:(n+2*h)
yy=c(rep(y[1],h),y,rep(y[n],h))       #create data outside the boundaries
right=rep(0,n)     #rightlimit for xx[1:n]
left=rep(0,n)       #leftlimit for xx[(1+2*h):(n+2*h)]
for (i in 1:n){
model=locpoly(xx[i:(i+2*h)],yy[i:(i+2*h)],kernel="epanech",bandwidth=h,gridsize=1+2*h)
right[i]=model$y[1]
left[i]=model$y[1+2*h]
}
L=c(rep(0,h),right[(2*h+1):n]-left[1:(n-2*h)],rep(0,h))
return(L)
}

DWB<-function(x,l,B=500){    #dependent wild bootstrap 
n=length(x)
V=as(as(diag(0,n), "diagonalMatrix"), "CsparseMatrix")
for (i in 1:n){
for (j in 1:n){
if (abs(i-j)<l)
V[i,j]=(1-abs(i-j)/l)            #Bartlett kernel
}
}
model=Cholesky(V, perm = TRUE, super = FALSE, Imult = 0)
L=as(model,"Matrix")
P=t(as(model, "pMatrix"))
X=matrix(0,nrow=B,ncol=n)                 #show B bootstrap samples
for(i in 1:B){
X[i,]=x*(P%*%(L%*%rnorm(n,mean=0,sd=1)))
}
return(X)
}

Pvalue<-function(x, y, h, candidate, B=500){
n=length(x)
jump=0 
for(k in 1:length(candidate)){
    jump<-jump+L[(candidate[k])]*(x>candidate[k])
  }
  hh=dpill(x,(y-jump))                #bandwidth selection
  yhat=locpoly(x,(y-jump), bandwidth=hh, gridsize=n)$y         #standard local linear regression
  residual=y-jump-yhat
  r=residual-mean(residual)       #centered residual
  rr=DWB(r,h,B)                 #bootstrap residual
  T=matrix(0,nrow=B,ncol=length(candidate))              #bootstrap statistics 
  segment=c(1,candidate[-length(candidate)]+floor(diff(candidate)/2),n)
  for(j in 1:B){
    yy=yhat+rr[j,]            #bootstrap y           
    LL=abs(screening(x,yy,h))
    for(k in 1:length(candidate)){
      T[j,k]=max(LL[(segment[k]:segment[k+1])])
    }
  }
  p=apply((T-matrix(rep(abs(L)[candidate],B),nrow=B,byrow=TRUE)>0),2,mean)
return(p)
}


##############################sample X2821
y=na.omit(CGHdata$X2821_log2ratio) 
n=length(y)
y=y[1:n]
x=1:n
n1=1:5       #estimated number of change points for methods 1-5
#######CBS
CBS=DNAcopy::segment(CNA(y, rep(1,n), 1:n))
estimate=CBS$output[,4]
estimate1=estimate[-length(CBS$output[,4])]
n1[1]=length(estimate1)
######DP
model=tilingArray::segment(y, maxseg=60, maxk=n/2)
estimate2=model@breakpoints[[which.max(logLik(model, penalty="BIC"))]][,"estimate"]
n1[2]=length(estimate2)
#######cumSeg
estimate3=jumpoints(y,k=60,output="2")$psi
n1[3]=length(estimate3)
######SaRa
h=10
model=SARA(y,h)
estimate4=model$index[which(p.adjust(model$pV, "BH")<0.1)]
n1[4]=length(estimate4)
#######Proposed
L=screening(x,y,h)
candidate=localMax(abs(L),span=2*h)
p=Pvalue(x,y,h,candidate)
estimate5=candidate[which(p.adjust(p,"BH")<0.1)]
n1[5]=length(estimate5)

##############################sample X1533.10
y=na.omit(CGHdata$X1533.10_log2ratio) 
n=length(y)
y=y[1:n]
x=1:n
n2=1:5       #estimated number of change points for methods 1-5
#######CBS
CBS=DNAcopy::segment(CNA(y, rep(1,n), 1:n))
estimate=CBS$output[,4]
estimate1=estimate[-length(CBS$output[,4])]
n2[1]=length(estimate1)
######DP
model=tilingArray::segment(y, maxseg=60, maxk=n/2)
estimate2=model@breakpoints[[which.max(logLik(model, penalty="BIC"))]][,"estimate"]
n2[2]=length(estimate2)
#######cumSeg
estimate3=jumpoints(y,k=60,output="2")$psi
n2[3]=length(estimate3)
######SaRa
h=10
model=SARA(y,h)
estimate4=model$index[which(p.adjust(model$pV, "BH")<0.1)]
n2[4]=length(estimate4)
#######Proposed
L=screening(x,y,h)
candidate=localMax(abs(L),span=2*h)
p=Pvalue(x,y,h,candidate)
estimate5=candidate[which(p.adjust(p,"BH")<0.1)]
n2[5]=length(estimate5)

##############################sample X1211.2
y=na.omit(CGHdata$X1211.2_log2ratio) 
n=length(y)
y=y[1:n]
x=1:n
n3=1:5       #estimated number of change points for methods 1-5
#######CBS
CBS=DNAcopy::segment(CNA(y, rep(1,n), 1:n))
estimate=CBS$output[,4]
estimate1=estimate[-length(CBS$output[,4])]
n3[1]=length(estimate1)
######DP
model=tilingArray::segment(y, maxseg=60, maxk=n/2)
estimate2=model@breakpoints[[which.max(logLik(model, penalty="BIC"))]][,"estimate"]
n3[2]=length(estimate2)
#######cumSeg
estimate3=jumpoints(y,k=60,output="2")$psi
n3[3]=length(estimate3)
######SaRa
h=10
model=SARA(y,h)
estimate4=model$index[which(p.adjust(model$pV, "BH")<0.1)]
n3[4]=length(estimate4)
#######Proposed
L=screening(x,y,h)
candidate=localMax(abs(L),span=2*h)
p=Pvalue(x,y,h,candidate)
estimate5=candidate[which(p.adjust(p,"BH")<0.1)]
n3[5]=length(estimate5)

##############show figure
par(mfrow=c(2,3))
estimate11=c(0,estimate1,n)
fitted1=NULL
for(i in 1:(length(estimate1)+1)){
m=mean(y[(estimate11[i]+1):estimate11[i+1]])
fitted1=c(fitted1,rep(m, estimate11[i+1]-estimate11[i]))
}
plot(y,xlab="locations",main="CBS",pch=20,col=8)
lines(fitted1,col=2,lwd=2)
estimate22=c(0,estimate2,n)
fitted2=NULL
for(i in 1:(length(estimate2)+1)){
m=mean(y[(estimate22[i]+1):estimate22[i+1]])
fitted2=c(fitted2,rep(m, estimate22[i+1]-estimate22[i]))
}
plot(y,xlab="locations",main="DP",pch=20,col=8)
lines(fitted2,col=2,lwd=2)
estimate33=c(0,estimate3,n)
fitted3=NULL
for(i in 1:(length(estimate3)+1)){
m=mean(y[(estimate33[i]+1):estimate33[i+1]])
fitted3=c(fitted3,rep(m, estimate33[i+1]-estimate33[i]))
}
plot(y,xlab="locations",main="cumSeg",pch=20,col=8)
lines(fitted3,col=2,lwd=2)
estimate44=c(0,estimate4,n)
fitted4=NULL
for(i in 1:(length(estimate4)+1)){
m=mean(y[(estimate44[i]+1):estimate44[i+1]])
fitted4=c(fitted4,rep(m, estimate44[i+1]-estimate44[i]))
}
plot(y,xlab="locations",main="SaRa",pch=20,col=8)
lines(fitted4,col=2,lwd=2)
jump=0 
for(i in 1:length(estimate5)){
  jump<-jump+L[estimate5[i]]*(x>estimate5[i])
}
hh=dpill(x,(y-jump))
fitted5=locpoly(x,(y-jump), degree=0, bandwidth=hh, gridsize=n)$y+jump
plot(y,xlab="locations",main="Proposed",pch=20,col=8)
lines(fitted5,col=2,lwd=2)
residual=y-fitted5
pacf(residual,lag.max=20,main="PACF")

plot(x[1301:1400],y[1301:1400],xlab="locations",ylab="y",ylim=c(-0.5,4),main="data",pch=16,col="black")
plot(x[1301:1400],y[1301:1400],xlab="locations",ylab="y",ylim=c(-0.5,0.5),main="CBS",pch=16,col=8)
lines(x[1301:1400],fitted1[1301:1400],col=2,lwd=2)
plot(x[1301:1400],y[1301:1400],xlab="locations",ylab="y",ylim=c(-0.5,0.5),main="DP",pch=16,col=8)
lines(x[1301:1400],fitted2[1301:1400],col=2,lwd=2)
plot(x[1301:1400],y[1301:1400],xlab="locations",ylab="y",ylim=c(-0.5,0.5),main="cumSeg",pch=16,col=8)
lines(x[1301:1400],fitted3[1301:1400],col=2,lwd=2)
plot(x[1301:1400],y[1301:1400],xlab="locations",ylab="y",ylim=c(-0.5,0.5),main="SaRa",pch=16,col=8)
lines(x[1301:1400],fitted4[1301:1400],col=2,lwd=2)
plot(x[1301:1400],y[1301:1400],xlab="locations",ylab="y",ylim=c(-0.5,0.5),main="Proposed",pch=16,col=8)
lines(x[1301:1400],fitted5[1301:1400],col=2,lwd=2)

############show table
rbind(n1,n2,n3)